		           +---------------------------+
       	           |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Jared Wolfe
Jie Zheng
Fubin Luan

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://github.com/ChristianJHughes/pintos-project3

			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

A page struct contains information about its user virtual address and its page frame. The frame for this page contains
a pointer to the kernal virtual address for accessing its data, as well as a pointer referencing the page it belongs to.
A page does not recieve a frame (physical memory) until the function frame_alloc_and_lock() is called for it. This function
is responsible for finding a free frame for this page.  It iterates through all of the frames, checking for a free one.  It
may need to evict a frame if none are available, which is described in more detail in B1.  On success, the page that called
this method is updated to contain a reference to the newly allocated frame.

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

A lock called scan_lock is initialized in the creation of the frame manager.
This ensures only one process can obtain the lock at a time to allocate a new frame.

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

Answer:	when we trying to get frame allocation and lock it, we will first try to fine a free frame spot first,
if no free frame exist, we trying to find a frame and try to evict it. for this processes we loop though the whole
frames twice , we can start at any position at the frames. first see if we can acquire a lock for current frame if we 
cannot, we skip this, and then check if the current frame's page is NULL, if it is, we replace the page we want to have 
a frame to the NULL page, and we release the lock we acquired before, and we return that frame. if not such NULL page, we 
check if the page for such frame is recently accessed, if it is we just release the lock and skip this frame. if both 
above condition failed, we release the scan lock first, and then we trying to evict that frame. since we already call
a lock for current frame, we just call the page_out for current frame's page. if it can be evict out. we set the page for 
current frame to the page passed in, and return current frame. if it cannot be evict out we release the frame lock we required 
before and return NULL.


>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Answer: we know that the size of the stack space is 1MB. and we need to ensure that the given address is within this space. so
we check the "(p.addr > PHYS_BASE - STACK_MAX)" and also we can get the stack pointer through the call with thread_current()->
User_esp. we can check if the address is valid if it is within 32 bytes of this stack pointer. so we check
"((void *)thread_current()->user_esp - 32 < address)". if both of them are hold we can safely allocate another page on the stack.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

In syscall.c, a mapping struct is responsible for binding a mapping id to a file and a location in memory.  Every thread
contains a list of the files which belong to it. This allows us to determine which files are available directly from memory.
If a mapped file is not in a list for a thread, the page is managed in the same way any other page is.

If a memory mapped file experiences page fault or eviction, it is either a) written to disk if it is dirty, or
b) evicted without using the swap functionality available for other pages.
It would not make sense to duplicate the memory mapped file in the swap partition since we know it exists in physical memory
on the disk.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
